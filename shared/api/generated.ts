/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * 3str.portfolio
 * API –¥–ª—è 3str.portfolio
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from "./api-instance";
import type { BodyType } from "./api-instance";
export interface AddSkillDto {
  title: string;
}

export interface UpdateProjectDto {
  deploy: string;
  description: string;
  github: string;
  image: Blob;
  labels: string;
  skillIds: string;
  title: string;
}

export interface AddProjectDto {
  deploy: string;
  description: string;
  github: string;
  image: Blob;
  labels: string;
  skillIds: string;
  title: string;
}

export interface SkillDto {
  id: number;
  title: string;
}

export interface ProjectDto {
  deploy: string;
  description: string;
  github: string;
  id: number;
  image: string;
  labels: string;
  skills: SkillDto[];
  title: string;
}

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const projectsControllerGetProjects = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ProjectDto[]>(
    { url: `/projects`, method: "get" },
    options,
  );
};

export const projectsControllerCreateProject = (
  addProjectDto: BodyType<AddProjectDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  const formData = new FormData();
  formData.append("title", addProjectDto.title);
  formData.append("description", addProjectDto.description);
  formData.append("skillIds", addProjectDto.skillIds);
  formData.append("image", addProjectDto.image);
  formData.append("github", addProjectDto.github);
  formData.append("deploy", addProjectDto.deploy);
  formData.append("labels", addProjectDto.labels);

  return createInstance<ProjectDto>(
    {
      url: `/projects`,
      method: "post",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const projectsControllerUpdateProject = (
  projectId: number,
  updateProjectDto: BodyType<UpdateProjectDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  const formData = new FormData();
  formData.append("title", updateProjectDto.title);
  formData.append("description", updateProjectDto.description);
  formData.append("skillIds", updateProjectDto.skillIds);
  formData.append("image", updateProjectDto.image);
  formData.append("github", updateProjectDto.github);
  formData.append("deploy", updateProjectDto.deploy);
  formData.append("labels", updateProjectDto.labels);

  return createInstance<ProjectDto>(
    {
      url: `/projects/${projectId}`,
      method: "put",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const projectsControllerDeleteProject = (
  projectId: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ProjectDto>(
    { url: `/projects/${projectId}`, method: "delete" },
    options,
  );
};

export const skillsControllerGetSkills = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<SkillDto[]>({ url: `/skills`, method: "get" }, options);
};

export const skillsControllerCreateSkill = (
  addSkillDto: BodyType<AddSkillDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<SkillDto>(
    {
      url: `/skills`,
      method: "post",
      headers: { "Content-Type": "application/json" },
      data: addSkillDto,
    },
    options,
  );
};

export const skillsControllerDeleteSkill = (
  skillId: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<SkillDto>(
    { url: `/skills/${skillId}`, method: "delete" },
    options,
  );
};

export type ProjectsControllerGetProjectsResult = NonNullable<
  Awaited<ReturnType<typeof projectsControllerGetProjects>>
>;
export type ProjectsControllerCreateProjectResult = NonNullable<
  Awaited<ReturnType<typeof projectsControllerCreateProject>>
>;
export type ProjectsControllerUpdateProjectResult = NonNullable<
  Awaited<ReturnType<typeof projectsControllerUpdateProject>>
>;
export type ProjectsControllerDeleteProjectResult = NonNullable<
  Awaited<ReturnType<typeof projectsControllerDeleteProject>>
>;
export type SkillsControllerGetSkillsResult = NonNullable<
  Awaited<ReturnType<typeof skillsControllerGetSkills>>
>;
export type SkillsControllerCreateSkillResult = NonNullable<
  Awaited<ReturnType<typeof skillsControllerCreateSkill>>
>;
export type SkillsControllerDeleteSkillResult = NonNullable<
  Awaited<ReturnType<typeof skillsControllerDeleteSkill>>
>;
